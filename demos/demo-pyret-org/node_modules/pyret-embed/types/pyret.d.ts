export type State = {
    definitionsAtLastRun: string;
    interactionsSinceLastRun: string[];
    editorContents: string;
    replContents: string;
    messageNumber?: number;
};
export type API = {
    sendReset: (state: State) => void;
    postMessage: (message: any) => void;
    getFrame: () => HTMLIFrameElement;
    setInteractions: (text: string) => void;
    runDefinitions: () => void;
    runInteractionResult: () => Promise<any>;
    onChange: (callback: ((msg: any) => void)) => void;
    clearInteractions: () => void;
};
export type EmbedConfig = {
    container: HTMLElement;
    src?: string;
    id?: string;
    state?: State;
    options: {
        footerStyle?: 'hidden';
        warnOnExit?: boolean;
        hideDefinitions?: boolean;
        hideInteractions?: boolean;
    };
};
export declare function makeEmbedConfig(config: EmbedConfig): Promise<API>;
export declare function makeEmbed(id: string, container: HTMLElement, src?: string): Promise<API>;
